/*
 * File: lib/features/currency_converter.dart
 * Location: /c:/Users/Tamal/Documents/smart_numerix_v2/lib/features/currency_converter.dart
 * Description: Real-time currency conversion with historical charts and multiple API fallbacks
 */

import 'dart:convert';
import 'dart:ui';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:intl/intl.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:math' as math;

import 'currency_service.dart';

class CurrencyConverterPage extends StatefulWidget {
  const CurrencyConverterPage({super.key});

  @override
  _CurrencyConverterPageState createState() => _CurrencyConverterPageState();
}

class _CurrencyConverterPageState extends State<CurrencyConverterPage> {
  final CurrencyService _currencyService = CurrencyService();
  final TextEditingController _amountController = TextEditingController(text: '1.00');

  String _fromCurrency = 'USD';
  String _toCurrency = 'BDT';
  double _amount = 1.0;
  double _convertedAmount = 0.0;
  Map<String, double> _rates = {};
  bool _isLoading = true;
  String? _errorMessage;
  DateTime? _lastUpdated;
  bool _isBengali = true;

  String _s(String key) => _translations[key]?[_isBengali ? 'bn' : 'en'] ?? key;
  String _n(String key, String langKey) => _currencyNames[key]?[langKey] ?? key;

  @override
  void initState() {
    super.initState();
    _loadData();
  }

  @override
  void dispose() {
    _amountController.dispose();
    super.dispose();
  }

  void _toggleLanguage() {
    setState(() => _isBengali = !_isBengali);
  }

  Future<void> _loadData() async {
    if (!mounted) return;
    setState(() {
      _isLoading = true;
      _errorMessage = null;
    });

    try {
      final futures = await Future.wait([
        _currencyService.getLatestRates(_fromCurrency),
        _currencyService.getCacheTimestamp(),
      ]);

      final latestData = futures[0] as Map<String, dynamic>;
      _lastUpdated = futures[1] as DateTime?;

      if (!latestData.containsKey('rates')) throw Exception('Invalid data received');

      final ratesData = latestData['rates'] as Map<String, dynamic>;
      _rates = ratesData.map((key, value) => MapEntry(key, (value as num).toDouble()));
      _rates[latestData['base'] ?? _fromCurrency] = 1.0;

      if (mounted) {
        _convertCurrency();
        setState(() => _isLoading = false);
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          _errorMessage = _s('error_message');
          _isLoading = false;
        });
      }
    }
  }

  void _convertCurrency() {
    if (_rates.containsKey(_toCurrency)) {
      final rate = _rates[_toCurrency]!;
      setState(() => _convertedAmount = _amount * rate);
    }
  }

  void _swapCurrencies() {
    setState(() {
      final temp = _fromCurrency;
      _fromCurrency = _toCurrency;
      _toCurrency = temp;
    });
    _loadData();
  }

  void _onAmountChanged(String value) {
    setState(() {
      _amount = double.tryParse(value) ?? 0;
      _convertCurrency();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(_s('app_title')),
        backgroundColor: const Color(0xFF10141C).withOpacity(0.8),
        elevation: 0,
        centerTitle: true,
        flexibleSpace: ClipRRect(child: BackdropFilter(filter: ImageFilter.blur(sigmaX: 10, sigmaY: 10), child: Container(color: Colors.transparent))),
        actions: [
          TextButton(
            onPressed: _toggleLanguage,
            style: TextButton.styleFrom(foregroundColor: Colors.white, shape: const CircleBorder()),
            child: Text(_isBengali ? 'EN' : 'BN', style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 16)),
          ),
        ],
      ),
      body: _AnimatedBackground(
        child: SafeArea(
          top: false,
          bottom: false,
          child: _isLoading
              ? const Center(child: CupertinoActivityIndicator(radius: 18, color: Colors.white))
              : _errorMessage != null
              ? _buildErrorState()
              : _buildContent(),
        ),
      ),
    );
  }

  Widget _buildContent() {
    return ListView(
      padding: const EdgeInsets.all(16.0),
      children: [
        _buildConverterSection(),
        const SizedBox(height: 16),
        if(_lastUpdated != null)
          Center(
            child: Text(
              '${_s('last_updated')}: ${DateFormat.yMMMd().add_jm().format(_lastUpdated!)}',
              style: const TextStyle(color: Colors.white54, fontSize: 12),
            ),
          ),
        const SizedBox(height: 16),
        _buildQuickInfoCard(),
        const SizedBox(height: 24),
      ],
    );
  }

  Widget _buildErrorState() {
    return Center(
      child: _StyledCard(
        child: Padding(
          padding: const EdgeInsets.all(24.0),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Icon(CupertinoIcons.wifi_exclamationmark, size: 50, color: Colors.orangeAccent),
              const SizedBox(height: 20),
              Text(
                _s('error_title'),
                style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.white),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 8),
              Text(
                _errorMessage!,
                textAlign: TextAlign.center,
                style: const TextStyle(color: Colors.white70),
              ),
              const SizedBox(height: 30),
              ElevatedButton.icon(
                icon: const Icon(Icons.refresh),
                label: Text(_s('retry_btn')),
                onPressed: _loadData,
                style: ElevatedButton.styleFrom(
                  backgroundColor: const Color(0xFF007BFF), foregroundColor: Colors.white,
                  padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(25)),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildConverterSection() {
    return Stack(
      alignment: Alignment.center,
      children: [
        Column(
          children: [
            _ConverterPod(
              label: _s('you_send'),
              amountController: _amountController,
              selectedCurrency: _fromCurrency,
              onCurrencyChanged: (val) {
                if (val != null) setState(() { _fromCurrency = val; _loadData(); });
              },
              isInput: true,
              onAmountChanged: _onAmountChanged,
            ),
            const SizedBox(height: 8),
            _ConverterPod(
              label: _s('they_get'),
              amount: _convertedAmount.toStringAsFixed(2),
              selectedCurrency: _toCurrency,
              onCurrencyChanged: (val) {
                if (val != null) setState(() { _toCurrency = val; _loadData(); });
              },
              isInput: false,
            ),
          ],
        ),
        Transform.translate(
          offset: const Offset(0, 4),
          child: InkWell(
            onTap: _swapCurrencies,
            borderRadius: BorderRadius.circular(50),
            child: Container(
              padding: const EdgeInsets.all(12),
              decoration: const BoxDecoration(
                shape: BoxShape.circle,
                gradient: LinearGradient(colors: [Color(0xFF007BFF), Colors.blueAccent]),
                boxShadow: [BoxShadow(color: Colors.blueAccent, blurRadius: 15, offset: Offset(0, 5))],
              ),
              child: const Icon(CupertinoIcons.arrow_2_circlepath, color: Colors.white, size: 28),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildQuickInfoCard() {
    final rate = _rates[_toCurrency];
    if (rate == null || rate == 0) return const SizedBox.shrink();

    final inverseRate = (1 / rate).toStringAsFixed(6);
    final langKey = _isBengali ? 'bn' : 'en';

    return _StyledCard(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(_s('quick_info'), style: const TextStyle(color: Colors.white, fontSize: 20, fontWeight: FontWeight.bold)),
          const SizedBox(height: 20),
          Text(_s('inverse_rate'), style: const TextStyle(color: Colors.white70, fontSize: 14)),
          const SizedBox(height: 4),
          Text(
            '1 $_toCurrency = $inverseRate $_fromCurrency',
            style: const TextStyle(color: Colors.white, fontSize: 18, fontWeight: FontWeight.bold),
          ),

          const Divider(height: 24, color: Colors.white24),
          Text(_s('full_name'), style: const TextStyle(color: Colors.white70, fontSize: 14)),
          const SizedBox(height: 8),
          Row(
            children: [
              Text(_currencyFlags[_fromCurrency] ?? 'üè≥Ô∏è', style: const TextStyle(fontSize: 20)),
              const SizedBox(width: 8),
              Expanded(
                child: Text(
                  _n(_fromCurrency, langKey),
                  style: const TextStyle(color: Colors.white, fontSize: 16),
                  overflow: TextOverflow.ellipsis,
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          Row(
            children: [
              Text(_currencyFlags[_toCurrency] ?? 'üè≥Ô∏è', style: const TextStyle(fontSize: 20)),
              const SizedBox(width: 8),
              Expanded(
                child: Text(
                  _n(_toCurrency, langKey),
                  style: const TextStyle(color: Colors.white, fontSize: 16),
                  overflow: TextOverflow.ellipsis,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }
}

class _ConverterPod extends StatelessWidget {
  final String label;
  final String selectedCurrency;
  final ValueChanged<String?> onCurrencyChanged;
  final bool isInput;
  final TextEditingController? amountController;
  final String? amount;
  final ValueChanged<String>? onAmountChanged;

  const _ConverterPod({
    required this.label, required this.selectedCurrency,
    required this.onCurrencyChanged, required this.isInput,
    this.amountController, this.amount, this.onAmountChanged,
  });

  @override
  Widget build(BuildContext context) {
    return _StyledCard(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(label, style: const TextStyle(color: Colors.white70, fontSize: 14)),
          const SizedBox(height: 12),
          Row(
            children: [
              Expanded(
                flex: 3,
                child: isInput
                    ? TextFormField(
                  controller: amountController,
                  keyboardType: const TextInputType.numberWithOptions(decimal: true),
                  style: const TextStyle(fontSize: 32, fontWeight: FontWeight.bold, color: Colors.white),
                  decoration: const InputDecoration.collapsed(hintText: '0.00', hintStyle: TextStyle(color: Colors.white30)),
                  onChanged: onAmountChanged,
                )
                    : Text(amount ?? '0.00', style: const TextStyle(fontSize: 32, fontWeight: FontWeight.bold, color: Colors.white)),
              ),
              const SizedBox(width: 16),
              Expanded(
                flex: 2,
                child: DropdownButtonFormField<String>(
                  value: selectedCurrency,
                  isExpanded: true,
                  decoration: const InputDecoration(border: InputBorder.none),
                  dropdownColor: const Color(0xFF1F2C50),
                  icon: const Icon(CupertinoIcons.chevron_down, color: Colors.white70, size: 18),
                  style: const TextStyle(color: Colors.white, fontSize: 20, fontWeight: FontWeight.bold),
                  items: _currencyFlags.keys.map((String currency) {
                    return DropdownMenuItem<String>(
                      value: currency,
                      child: Row(
                        children: [
                          Text(_currencyFlags[currency] ?? 'üè≥Ô∏è', style: const TextStyle(fontSize: 24)),
                          const SizedBox(width: 8),
                          Expanded(child: Text(currency, overflow: TextOverflow.ellipsis)),
                        ],
                      ),
                    );
                  }).toList(),
                  onChanged: onCurrencyChanged,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }
}

class _StyledCard extends StatelessWidget {
  final Widget child;
  final EdgeInsets? padding;
  final EdgeInsets? margin;
  const _StyledCard({required this.child, this.padding, this.margin});

  @override
  Widget build(BuildContext context) {
    return Card(
      elevation: 4,
      color: const Color(0xFF1A1F2C).withOpacity(0.5),
      shadowColor: Colors.black.withOpacity(0.5),
      margin: margin,
      shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(16),
          side: BorderSide(color: Colors.white.withOpacity(0.15))
      ),
      child: Padding(
        padding: padding ?? const EdgeInsets.all(20.0),
        child: child,
      ),
    );
  }
}

class _AnimatedBackground extends StatefulWidget {
  final Widget child;
  const _AnimatedBackground({required this.child});

  @override
  State<_AnimatedBackground> createState() => _AnimatedBackgroundState();
}

class _AnimatedBackgroundState extends State<_AnimatedBackground> with SingleTickerProviderStateMixin {
  late AnimationController _controller;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(vsync: this, duration: const Duration(seconds: 25))..repeat(reverse: true);
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: _controller,
      builder: (context, child) {
        return Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: const [ Color(0xFF0A0F1A), Color(0xFF10141C), Color(0xFF0B2A4B), Color(0xFF3A2A5B), ],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              transform: GradientRotation(_controller.value * 2 * math.pi),
            ),
          ),
          child: widget.child,
        );
      },
    );
  }
}

const Map<String, Map<String, String>> _translations = {
  'app_title': {'bn': '‡¶Æ‡ßÅ‡¶¶‡ßç‡¶∞‡¶æ ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ', 'en': 'Currency Converter'},
  'you_send': {'bn': '‡¶Ü‡¶™‡¶®‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶ö‡ßç‡¶õ‡ßá‡¶®', 'en': 'You Send'},
  'they_get': {'bn': '‡¶§‡¶æ‡¶∞‡¶æ ‡¶™‡¶æ‡¶¨‡ßá', 'en': 'They Get'},
  'last_updated': {'bn': '‡¶∏‡¶∞‡ßç‡¶¨‡¶∂‡ßá‡¶∑ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü', 'en': 'Last Updated'},
  'error_title': {'bn': '‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø', 'en': 'Connection Error'},
  'error_message': {'bn': '‡¶°‡ßá‡¶ü‡¶æ ‡¶Ü‡¶®‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶®‡ßá‡¶ü ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§', 'en': 'Could not fetch data. Please check your internet connection.'},
  'retry_btn': {'bn': '‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®', 'en': 'Retry'},
  'quick_info': {'bn': '‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶§‡¶•‡ßç‡¶Ø', 'en': 'Quick Info'},
  'inverse_rate': {'bn': '‡¶¨‡¶ø‡¶™‡¶∞‡ßÄ‡¶§ ‡¶π‡¶æ‡¶∞', 'en': 'Inverse Rate'},
  'full_name': {'bn': '‡¶™‡ßÅ‡¶∞‡ßã ‡¶®‡¶æ‡¶Æ', 'en': 'Full Name'},
};

const Map<String, String> _currencyFlags = {
  'AED': 'üá¶üá™', // UAE Dirham
  'AFN': 'üá¶üá´', // Afghan Afghani
  'ALL': 'üá¶üá±', // Albanian Lek
  'AMD': 'üá¶üá≤', // Armenian Dram
  'ANG': 'üá≥üá±', // Netherlands Antillean Guilder (Uses NL flag as it's part of the Kingdom)
  'AOA': 'üá¶üá¥', // Angolan Kwanza
  'ARS': 'üá¶üá∑', // Argentine Peso
  'AUD': 'üá¶üá∫', // Australian Dollar
  'AWG': 'üá¶üáº', // Aruban Florin
  'AZN': 'üá¶üáø', // Azerbaijani Manat
  'BAM': 'üáßüá¶', // Bosnia-Herzegovina Convertible Mark
  'BBD': 'üáßüáß', // Barbadian Dollar
  'BDT': 'üáßüá©', // Bangladeshi Taka
  'BGN': 'üáßüá¨', // Bulgarian Lev
  'BHD': 'üáßüá≠', // Bahraini Dinar
  'BIF': 'üáßüáÆ', // Burundian Franc
  'BMD': 'üáßüá≤', // Bermudan Dollar
  'BND': 'üáßüá≥', // Brunei Dollar
  'BOB': 'üáßüá¥', // Bolivian Boliviano
  'BRL': 'üáßüá∑', // Brazilian Real
  'BSD': 'üáßüá∏', // Bahamian Dollar
  'BTN': 'üáßüáπ', // Bhutanese Ngultrum
  'BWP': 'üáßüáº', // Botswanan Pula
  'BYN': 'üáßüáæ', // Belarusian Ruble
  'BZD': 'üáßüáø', // Belize Dollar
  'CAD': 'üá®üá¶', // Canadian Dollar
  'CDF': 'üá®üá©', // Congolese Franc
  'CHF': 'üá®üá≠', // Swiss Franc
  'CKD': 'üá®üá∞', // Cook Islands Dollar
  'CLP': 'üá®üá±', // Chilean Peso
  'CNY': 'üá®üá≥', // Chinese Yuan
  'COP': 'üá®üá¥', // Colombian Peso
  'CRC': 'üá®üá∑', // Costa Rican Col√≥n
  'CUP': 'üá®üá∫', // Cuban Peso
  'CVE': 'üá®üáª', // Cape Verdean Escudo
  'CZK': 'üá®üáø', // Czech Koruna
  'DJF': 'üá©üáØ', // Djiboutian Franc
  'DKK': 'üá©üá∞', // Danish Krone
  'DOP': 'üá©üá¥', // Dominican Peso
  'DZD': 'üá©üáø', // Algerian Dinar
  'EGP': 'üá™üá¨', // Egyptian Pound
  'ERN': 'üá™üá∑', // Eritrean Nakfa
  'ETB': 'üá™üáπ', // Ethiopian Birr
  'EUR': 'üá™üá∫', // Euro
  'FJD': 'üá´üáØ', // Fijian Dollar
  'FKP': 'üá´üá∞', // Falkland Islands Pound
  'FOK': 'üá´üá¥', // Faroese Kr√≥na
  'GBP': 'üá¨üáß', // British Pound
  'GEL': 'üá¨üá™', // Georgian Lari
  'GGP': 'üá¨üá¨', // Guernsey Pound
  'GHS': 'üá¨üá≠', // Ghanaian Cedi
  'GIP': 'üá¨üáÆ', // Gibraltar Pound
  'GMD': 'üá¨üá≤', // Gambian Dalasi
  'GNF': 'üá¨üá≥', // Guinean Franc
  'GTQ': 'üá¨üáπ', // Guatemalan Quetzal
  'GYD': 'üá¨üáæ', // Guyanaese Dollar
  'HKD': 'üá≠üá∞', // Hong Kong Dollar
  'HNL': 'üá≠üá≥', // Honduran Lempira
  'HRK': 'üá≠üá∑', // Croatian Kuna (largely replaced by EUR)
  'HTG': 'üá≠üáπ', // Haitian Gourde
  'HUF': 'üá≠üá∫', // Hungarian Forint
  'IDR': 'üáÆüá©', // Indonesian Rupiah
  'ILS': 'üáÆüá±', // Israeli New Shekel
  'IMP': 'üáÆüá≤', // Manx Pound
  'INR': 'üáÆüá≥', // Indian Rupee
  'IQD': 'üáÆüá∂', // Iraqi Dinar
  'IRR': 'üáÆüá∑', // Iranian Rial
  'ISK': 'üáÆüá∏', // Icelandic Kr√≥na
  'JEP': 'üáØüá™', // Jersey Pound
  'JMD': 'üáØüá≤', // Jamaican Dollar
  'JOD': 'üáØüá¥', // Jordanian Dinar
  'JPY': 'üáØüáµ', // Japanese Yen
  'KES': 'üá∞üá™', // Kenyan Shilling
  'KGS': 'üá∞üá¨', // Kyrgystani Som
  'KHR': 'üá∞üá≠', // Cambodian Riel
  'KID': 'üá∞üáÆ', // Kiribati Dollar
  'KMF': 'üá∞üá≤', // Comorian Franc
  'KPW': 'üá∞üáµ', // North Korean Won
  'KRW': 'üá∞üá∑', // South Korean Won
  'KWD': 'üá∞üáº', // Kuwaiti Dinar
  'KYD': 'üá∞üáæ', // Cayman Islands Dollar
  'KZT': 'üá∞üáø', // Kazakhstani Tenge
  'LAK': 'üá±üá¶', // Laotian Kip
  'LBP': 'üá±üáß', // Lebanese Pound
  'LKR': 'üá±üá∞', // Sri Lankan Rupee
  'LRD': 'üá±üá∑', // Liberian Dollar
  'LSL': 'üá±üá∏', // Lesotho Loti
  'LYD': 'üá±üáæ', // Libyan Dinar
  'MAD': 'üá≤üá¶', // Moroccan Dirham
  'MDL': 'üá≤üá©', // Moldovan Leu
  'MGA': 'üá≤üá¨', // Malagasy Ariary
  'MKD': 'üá≤üá∞', // Macedonian Denar
  'MMK': 'üá≤üá≤', // Myanmar Kyat
  'MNT': 'üá≤üá≥', // Mongolian Tugrik
  'MOP': 'üá≤üá¥', // Macanese Pataca
  'MRU': 'üá≤üá∑', // Mauritanian Ouguiya
  'MUR': 'üá≤üá∫', // Mauritian Rupee
  'MVR': 'üá≤üáª', // Maldivian Rufiyaa
  'MWK': 'üá≤üáº', // Malawian Kwacha
  'MXN': 'üá≤üáΩ', // Mexican Peso
  'MYR': 'üá≤üáæ', // Malaysian Ringgit
  'MZN': 'üá≤üáø', // Mozambican Metical
  'NAD': 'üá≥üá¶', // Namibian Dollar
  'NGN': 'üá≥üá¨', // Nigerian Naira
  'NIO': 'üá≥üáÆ', // Nicaraguan C√≥rdoba
  'NOK': 'üá≥üá¥', // Norwegian Krone
  'NPR': 'üá≥üáµ', // Nepalese Rupee
  'NZD': 'üá≥üáø', // New Zealand Dollar
  'OMR': 'üá¥üá≤', // Omani Rial
  'PAB': 'üáµüá¶', // Panamanian Balboa
  'PEN': 'üáµüá™', // Peruvian Sol
  'PGK': 'üáµüá¨', // Papua New Guinean Kina
  'PHP': 'üáµüá≠', // Philippine Peso
  'PKR': 'üáµüá∞', // Pakistani Rupee
  'PLN': 'üáµüá±', // Polish Z≈Çoty
  'PYG': 'üáµüáæ', // Paraguayan Guarani
  'QAR': 'üá∂üá¶', // Qatari Riyal
  'RON': 'üá∑üá¥', // Romanian Leu
  'RSD': 'üá∑üá∏', // Serbian Dinar
  'RUB': 'üá∑üá∫', // Russian Ruble
  'RWF': 'üá∑üáº', // Rwandan Franc
  'SAR': 'üá∏üá¶', // Saudi Riyal
  'SBD': 'üá∏üáß', // Solomon Islands Dollar
  'SCR': 'üá∏üá®', // Seychellois Rupee
  'SDG': 'üá∏üá©', // Sudanese Pound
  'SEK': 'üá∏üá™', // Swedish Krona
  'SGD': 'üá∏üá¨', // Singapore Dollar
  'SHP': 'üá∏üá≠', // Saint Helena Pound
  'SLE': 'üá∏üá±', // Sierra Leonean Leone (New)
  'SLL': 'üá∏üá±', // Sierra Leonean Leone (Old, still common)
  'SOS': 'üá∏üá¥', // Somali Shilling
  'SRD': 'üá∏üá∑', // Surinamese Dollar
  'SSP': 'üá∏üá∏', // South Sudanese Pound
  'STN': 'üá∏üáπ', // S√£o Tom√© and Pr√≠ncipe Dobra
  'SVC': 'üá∏üáª', // Salvadoran Col√≥n (largely replaced by USD)
  'SYP': 'üá∏üáæ', // Syrian Pound
  'SZL': 'üá∏üáø', // Swazi Lilangeni
  'THB': 'üáπüá≠', // Thai Baht
  'TJS': 'üáπüáØ', // Tajikistani Somoni
  'TMT': 'üáπüá≤', // Turkmenistani Manat
  'TND': 'üáπüá≥', // Tunisian Dinar
  'TOP': 'üáπüá¥', // Tongan Pa ªanga
  'TRY': 'üáπüá∑', // Turkish Lira
  'TTD': 'üáπüáπ', // Trinidad and Tobago Dollar
  'TVD': 'üáπüáª', // Tuvaluan Dollar
  'TWD': 'üáπüáº', // New Taiwan Dollar
  'TZS': 'üáπüáø', // Tanzanian Shilling
  'UAH': 'üá∫üá¶', // Ukrainian Hryvnia
  'UGX': 'üá∫üá¨', // Ugandan Shilling
  'USD': 'üá∫üá∏', // US Dollar
  'UYU': 'üá∫üáæ', // Uruguayan Peso
  'UZS': 'üá∫üáø', // Uzbekistani Som
  'VES': 'üáªüá™', // Venezuelan Bol√≠var Soberano
  'VND': 'üáªüá≥', // Vietnamese ƒê·ªìng
  'VUV': 'üáªüá∫', // Vanuatu Vatu
  'WST': 'üáºüá∏', // Samoan TƒÅlƒÅ
  'XAF': 'üá®üá≤', // CFA Franc BEAC (Cameroon flag for Central Africa)
  'XAG': 'ü•à', // Silver (Troy Ounce) - Using medal emoji
  'XAU': 'ü•á', // Gold (Troy Ounce) - Using medal emoji
  'XCD': 'üá¶üá¨', // East Caribbean Dollar (Antigua & Barbuda flag often used)
  'XDR': 'üåç', // Special Drawing Rights (IMF) - Using globe emoji
  'XOF': 'üá®üá´', // CFA Franc BCEAO (Central African Republic flag for West Africa)
  'XPD': '‚ö´', // Palladium (Troy Ounce) - Using black circle placeholder
  'XPF': 'üáµüá´', // CFP Franc (French Polynesia flag often used)
  'XPT': '‚ö™', // Platinum (Troy Ounce) - Using white circle placeholder
  'YER': 'üáæüá™', // Yemeni Rial
  'ZAR': 'üáøüá¶', // South African Rand
  'ZMW': 'üáøüá≤', // Zambian Kwacha
  'ZWL': 'üáøüáº'  // Zimbabwean Dollar
};

const Map<String, Map<String, String>> _currencyNames = {
  'AED': {'bn': '‡¶á‡¶â‡¶è‡¶á ‡¶¶‡¶ø‡¶∞‡¶π‡¶æ‡¶Æ', 'en': 'UAE Dirham'},
  'AFN': {'bn': '‡¶Ü‡¶´‡¶ó‡¶æ‡¶® ‡¶Ü‡¶´‡¶ó‡¶æ‡¶®‡¶ø', 'en': 'Afghan Afghani'},
  'ALL': {'bn': '‡¶Ü‡¶≤‡¶¨‡ßá‡¶®‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶≤‡ßá‡¶ï', 'en': 'Albanian Lek'},
  'AMD': {'bn': '‡¶Ü‡¶∞‡ßç‡¶Æ‡ßá‡¶®‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶°‡ßç‡¶∞‡¶æ‡¶Æ', 'en': 'Armenian Dram'},
  'ANG': {'bn': '‡¶®‡ßá‡¶¶‡¶æ‡¶∞‡¶≤‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶∏ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶ü‡¶ø‡¶≤‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶ó‡¶ø‡¶≤‡ßç‡¶°‡¶æ‡¶∞', 'en': 'Netherlands Antillean Guilder'},
  'AOA': {'bn': '‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ô‡ßç‡¶ó‡ßã‡¶≤‡¶æ‡¶® ‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶®‡¶ú‡¶æ', 'en': 'Angolan Kwanza'},
  'ARS': {'bn': '‡¶Ü‡¶∞‡ßç‡¶ú‡ßá‡¶®‡ßç‡¶ü‡¶æ‡¶á‡¶® ‡¶™‡ßá‡¶∏‡ßã', 'en': 'Argentine Peso'},
  'AUD': {'bn': '‡¶Ö‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶≤‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶°‡¶≤‡¶æ‡¶∞', 'en': 'Australian Dollar'},
  'AWG': {'bn': '‡¶Ü‡¶∞‡ßÅ‡¶¨‡¶æ‡¶® ‡¶´‡ßç‡¶≤‡ßã‡¶∞‡¶ø‡¶®', 'en': 'Aruban Florin'},
  'AZN': {'bn': '‡¶Ü‡¶ú‡¶æ‡¶∞‡¶¨‡¶æ‡¶á‡¶ú‡¶æ‡¶®‡¶ø ‡¶Æ‡¶æ‡¶®‡¶æ‡¶§', 'en': 'Azerbaijani Manat'},
  'BAM': {'bn': '‡¶¨‡¶∏‡¶®‡¶ø‡¶Ø‡¶º‡¶æ-‡¶π‡¶æ‡¶∞‡ßç‡¶ú‡ßá‡¶ó‡ßã‡¶≠‡¶ø‡¶®‡¶æ ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï', 'en': 'Bosnia-Herzegovina Convertible Mark'},
  'BBD': {'bn': '‡¶¨‡¶æ‡¶∞‡ßç‡¶¨‡¶æ‡¶°‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶°‡¶≤‡¶æ‡¶∞', 'en': 'Barbadian Dollar'},
  'BDT': {'bn': '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡ßÄ ‡¶ü‡¶æ‡¶ï‡¶æ', 'en': 'Bangladeshi Taka'},
  'BGN': {'bn': '‡¶¨‡ßÅ‡¶≤‡¶ó‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶≤‡ßá‡¶≠', 'en': 'Bulgarian Lev'},
  'BHD': {'bn': '‡¶¨‡¶æ‡¶π‡¶∞‡¶æ‡¶á‡¶®‡¶ø ‡¶¶‡¶ø‡¶®‡¶æ‡¶∞', 'en': 'Bahraini Dinar'},
  'BIF': {'bn': '‡¶¨‡ßÅ‡¶∞‡ßÅ‡¶®‡ßç‡¶°‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶´‡ßç‡¶∞‡¶æ‡¶Å', 'en': 'Burundian Franc'},
  'BMD': {'bn': '‡¶¨‡¶æ‡¶∞‡¶Æ‡ßÅ‡¶°‡¶æ‡¶® ‡¶°‡¶≤‡¶æ‡¶∞', 'en': 'Bermudan Dollar'},
  'BND': {'bn': '‡¶¨‡ßç‡¶∞‡ßÅ‡¶®‡¶æ‡¶á ‡¶°‡¶≤‡¶æ‡¶∞', 'en': 'Brunei Dollar'},
  'BOB': {'bn': '‡¶¨‡¶≤‡¶ø‡¶≠‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶¨‡¶≤‡¶ø‡¶≠‡¶ø‡¶Ø‡¶º‡¶æ‡¶®‡ßã', 'en': 'Bolivian Boliviano'},
  'BRL': {'bn': '‡¶¨‡ßç‡¶∞‡¶æ‡¶ú‡¶ø‡¶≤‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶≤', 'en': 'Brazilian Real'},
  'BSD': {'bn': '‡¶¨‡¶æ‡¶π‡¶æ‡¶Æ‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶°‡¶≤‡¶æ‡¶∞', 'en': 'Bahamian Dollar'},
  'BTN': {'bn': '‡¶≠‡ßÅ‡¶ü‡¶æ‡¶®‡¶ø‡¶ú ‡¶è‡¶®‡¶ó‡ßÅ‡¶≤‡¶ü‡ßç‡¶∞‡¶æ‡¶Æ', 'en': 'Bhutanese Ngultrum'},
  'BWP': {'bn': '‡¶¨‡¶§‡¶∏‡ßã‡¶Ø‡¶º‡¶æ‡¶®‡¶æ‡¶® ‡¶™‡ßÅ‡¶≤‡¶æ', 'en': 'Botswanan Pula'},
  'BYN': {'bn': '‡¶¨‡ßá‡¶≤‡¶æ‡¶∞‡ßÅ‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶∞‡ßÅ‡¶¨‡ßá‡¶≤', 'en': 'Belarusian Ruble'},
  'BZD': {'bn': '‡¶¨‡ßá‡¶≤‡¶ø‡¶ú ‡¶°‡¶≤‡¶æ‡¶∞', 'en': 'Belize Dollar'},
  'CAD': {'bn': '‡¶ï‡¶æ‡¶®‡¶æ‡¶°‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶°‡¶≤‡¶æ‡¶∞', 'en': 'Canadian Dollar'},
  'CDF': {'bn': '‡¶ï‡¶ô‡ßç‡¶ó‡ßã‡¶≤‡¶ø‡¶ú ‡¶´‡ßç‡¶∞‡¶æ‡¶Å', 'en': 'Congolese Franc'},
  'CHF': {'bn': '‡¶∏‡ßÅ‡¶á‡¶∏ ‡¶´‡ßç‡¶∞‡¶æ‡¶Å', 'en': 'Swiss Franc'},
  'CKD': {'bn': '‡¶ï‡ßÅ‡¶ï ‡¶¶‡ßç‡¶¨‡ßÄ‡¶™‡¶™‡ßÅ‡¶û‡ßç‡¶ú ‡¶°‡¶≤‡¶æ‡¶∞', 'en': 'Cook Islands Dollar'},
  'CLP': {'bn': '‡¶ö‡¶ø‡¶≤‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶™‡ßá‡¶∏‡ßã', 'en': 'Chilean Peso'},
  'CNY': {'bn': '‡¶ö‡¶æ‡¶á‡¶®‡¶ø‡¶ú ‡¶á‡¶â‡¶Ø‡¶º‡¶æ‡¶®', 'en': 'Chinese Yuan'},
  'COP': {'bn': '‡¶ï‡¶≤‡¶Æ‡ßç‡¶¨‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶™‡ßá‡¶∏‡ßã', 'en': 'Colombian Peso'},
  'CRC': {'bn': '‡¶ï‡ßã‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡¶ø‡¶ï‡¶æ‡¶® ‡¶ï‡ßã‡¶≤‡¶®', 'en': 'Costa Rican Col√≥n'},
  'CUP': {'bn': '‡¶ï‡¶ø‡¶â‡¶¨‡¶æ‡¶® ‡¶™‡ßá‡¶∏‡ßã', 'en': 'Cuban Peso'},
  'CVE': {'bn': '‡¶ï‡ßá‡¶™ ‡¶≠‡¶æ‡¶∞‡ßç‡¶°‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶è‡¶∏‡¶ï‡ßÅ‡¶°‡ßã', 'en': 'Cape Verdean Escudo'},
  'CZK': {'bn': '‡¶ö‡ßá‡¶ï ‡¶ï‡ßã‡¶∞‡ßÅ‡¶®‡¶æ', 'en': 'Czech Koruna'},
  'DJF': {'bn': '‡¶ú‡¶ø‡¶¨‡ßÅ‡¶§‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶´‡ßç‡¶∞‡¶æ‡¶Å', 'en': 'Djiboutian Franc'},
  'DKK': {'bn': '‡¶°‡ßá‡¶®‡¶ø‡¶∂ ‡¶ï‡ßç‡¶∞‡ßã‡¶®', 'en': 'Danish Krone'},
  'DOP': {'bn': '‡¶°‡ßã‡¶Æ‡¶ø‡¶®‡¶ø‡¶ï‡¶æ‡¶® ‡¶™‡ßá‡¶∏‡ßã', 'en': 'Dominican Peso'},
  'DZD': {'bn': '‡¶Ü‡¶≤‡¶ú‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶¶‡¶ø‡¶®‡¶æ‡¶∞', 'en': 'Algerian Dinar'},
  'EGP': {'bn': '‡¶Æ‡¶ø‡¶∂‡¶∞‡ßÄ‡¶Ø‡¶º ‡¶™‡¶æ‡¶â‡¶®‡ßç‡¶°', 'en': 'Egyptian Pound'},
  'ERN': {'bn': '‡¶á‡¶∞‡¶ø‡¶§‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶®‡¶æ‡¶ï‡¶´‡¶æ', 'en': 'Eritrean Nakfa'},
  'ETB': {'bn': '‡¶á‡¶•‡¶ø‡¶ì‡¶™‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶¨‡¶ø‡¶∞', 'en': 'Ethiopian Birr'},
  'EUR': {'bn': '‡¶á‡¶â‡¶∞‡ßã', 'en': 'Euro'},
  'FJD': {'bn': '‡¶´‡¶ø‡¶ú‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶°‡¶≤‡¶æ‡¶∞', 'en': 'Fijian Dollar'},
  'FKP': {'bn': '‡¶´‡¶ï‡¶≤‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶° ‡¶¶‡ßç‡¶¨‡ßÄ‡¶™‡¶™‡ßÅ‡¶û‡ßç‡¶ú ‡¶™‡¶æ‡¶â‡¶®‡ßç‡¶°', 'en': 'Falkland Islands Pound'},
  'FOK': {'bn': '‡¶´‡ßç‡¶Ø‡¶æ‡¶∞‡ßã‡¶ú‡¶ø ‡¶ï‡ßç‡¶∞‡ßã‡¶®‡¶æ', 'en': 'Faroese Kr√≥na'},
  'GBP': {'bn': '‡¶¨‡ßç‡¶∞‡¶ø‡¶ü‡¶ø‡¶∂ ‡¶™‡¶æ‡¶â‡¶®‡ßç‡¶°', 'en': 'British Pound'},
  'GEL': {'bn': '‡¶ú‡¶∞‡ßç‡¶ú‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶≤‡¶æ‡¶∞‡¶ø', 'en': 'Georgian Lari'},
  'GGP': {'bn': '‡¶ó‡¶æ‡¶∞‡ßç‡¶®‡¶∏‡¶ø ‡¶™‡¶æ‡¶â‡¶®‡ßç‡¶°', 'en': 'Guernsey Pound'},
  'GHS': {'bn': '‡¶ò‡¶æ‡¶®‡¶æ‡¶á‡¶Ø‡¶º‡¶æ‡¶® ‡¶∏‡¶ø‡¶°‡¶ø', 'en': 'Ghanaian Cedi'},
  'GIP': {'bn': '‡¶ú‡¶ø‡¶¨‡ßç‡¶∞‡¶æ‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ ‡¶™‡¶æ‡¶â‡¶®‡ßç‡¶°', 'en': 'Gibraltar Pound'},
  'GMD': {'bn': '‡¶ó‡¶æ‡¶Æ‡ßç‡¶¨‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶°‡¶æ‡¶≤‡¶æ‡¶∏‡¶ø', 'en': 'Gambian Dalasi'},
  'GNF': {'bn': '‡¶ó‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶´‡ßç‡¶∞‡¶æ‡¶Å', 'en': 'Guinean Franc'},
  'GTQ': {'bn': '‡¶ó‡ßÅ‡¶Ø‡¶º‡¶æ‡¶§‡ßá‡¶Æ‡¶æ‡¶≤‡¶æ‡¶® ‡¶ï‡ßÅ‡¶Ø‡¶º‡ßá‡¶ü‡¶ú‡¶æ‡¶≤', 'en': 'Guatemalan Quetzal'},
  'GYD': {'bn': '‡¶ó‡¶æ‡¶Ø‡¶º‡¶æ‡¶®‡¶ø‡¶ú ‡¶°‡¶≤‡¶æ‡¶∞', 'en': 'Guyanaese Dollar'},
  'HKD': {'bn': '‡¶π‡¶Ç‡¶ï‡¶Ç ‡¶°‡¶≤‡¶æ‡¶∞', 'en': 'Hong Kong Dollar'},
  'HNL': {'bn': '‡¶π‡¶®‡ßç‡¶°‡ßÅ‡¶∞‡¶æ‡¶® ‡¶≤‡ßá‡¶Æ‡ßç‡¶™‡¶ø‡¶∞‡¶æ', 'en': 'Honduran Lempira'},
  'HRK': {'bn': '‡¶ï‡ßç‡¶∞‡ßã‡¶Ø‡¶º‡ßá‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶ï‡ßÅ‡¶®‡¶æ', 'en': 'Croatian Kuna'}, // Note: Replaced by EUR
  'HTG': {'bn': '‡¶π‡¶æ‡¶á‡¶§‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶ó‡ßÅ‡¶∞‡ßç‡¶°', 'en': 'Haitian Gourde'},
  'HUF': {'bn': '‡¶π‡¶æ‡¶ô‡ßç‡¶ó‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶´‡ßã‡¶∞‡¶ø‡¶®‡ßç‡¶ü', 'en': 'Hungarian Forint'},
  'IDR': {'bn': '‡¶á‡¶®‡ßç‡¶¶‡ßã‡¶®‡ßá‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶∞‡ßÅ‡¶™‡¶ø‡¶Ø‡¶º‡¶æ‡¶π', 'en': 'Indonesian Rupiah'},
  'ILS': {'bn': '‡¶á‡¶∏‡¶∞‡¶æ‡¶Ø‡¶º‡ßá‡¶≤‡¶ø ‡¶®‡¶ø‡¶â ‡¶∂‡ßá‡¶ï‡ßá‡¶≤', 'en': 'Israeli New Shekel'},
  'IMP': {'bn': '‡¶Ü‡¶á‡¶≤ ‡¶Ö‡¶´ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶® ‡¶™‡¶æ‡¶â‡¶®‡ßç‡¶°', 'en': 'Manx Pound'},
  'INR': {'bn': '‡¶≠‡¶æ‡¶∞‡¶§‡ßÄ‡¶Ø‡¶º ‡¶∞‡ßÅ‡¶™‡¶ø', 'en': 'Indian Rupee'},
  'IQD': {'bn': '‡¶á‡¶∞‡¶æ‡¶ï‡¶ø ‡¶¶‡¶ø‡¶®‡¶æ‡¶∞', 'en': 'Iraqi Dinar'},
  'IRR': {'bn': '‡¶á‡¶∞‡¶æ‡¶®‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤', 'en': 'Iranian Rial'},
  'ISK': {'bn': '‡¶Ü‡¶á‡¶∏‡¶≤‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶ø‡¶ï ‡¶ï‡ßç‡¶∞‡ßã‡¶®‡¶æ', 'en': 'Icelandic Kr√≥na'},
  'JEP': {'bn': '‡¶ú‡¶æ‡¶∞‡ßç‡¶∏‡¶ø ‡¶™‡¶æ‡¶â‡¶®‡ßç‡¶°', 'en': 'Jersey Pound'},
  'JMD': {'bn': '‡¶ú‡ßç‡¶Ø‡¶æ‡¶Æ‡¶æ‡¶á‡¶ï‡¶æ‡¶® ‡¶°‡¶≤‡¶æ‡¶∞', 'en': 'Jamaican Dollar'},
  'JOD': {'bn': '‡¶ú‡¶∞‡ßç‡¶°‡¶æ‡¶®‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶¶‡¶ø‡¶®‡¶æ‡¶∞', 'en': 'Jordanian Dinar'},
  'JPY': {'bn': '‡¶ú‡¶æ‡¶™‡¶æ‡¶®‡¶ø‡¶ú ‡¶á‡¶Ø‡¶º‡ßá‡¶®', 'en': 'Japanese Yen'},
  'KES': {'bn': '‡¶ï‡ßá‡¶®‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶∂‡¶ø‡¶≤‡¶ø‡¶Ç', 'en': 'Kenyan Shilling'},
  'KGS': {'bn': '‡¶ï‡¶ø‡¶∞‡¶ó‡¶ø‡¶ú‡¶∏‡ßç‡¶§‡¶æ‡¶®‡¶ø ‡¶∏‡ßã‡¶Æ', 'en': 'Kyrgystani Som'},
  'KHR': {'bn': '‡¶ï‡¶Æ‡ßç‡¶¨‡ßã‡¶°‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶≤', 'en': 'Cambodian Riel'},
  'KID': {'bn': '‡¶ï‡¶ø‡¶∞‡¶ø‡¶¨‡¶æ‡¶ü‡¶ø ‡¶°‡¶≤‡¶æ‡¶∞', 'en': 'Kiribati Dollar'},
  'KMF': {'bn': '‡¶ï‡ßã‡¶Æ‡ßã‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶´‡ßç‡¶∞‡¶æ‡¶Å', 'en': 'Comorian Franc'},
  'KPW': {'bn': '‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶ï‡ßã‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶ì‡¶®', 'en': 'North Korean Won'},
  'KRW': {'bn': '‡¶¶‡¶ï‡ßç‡¶∑‡¶ø‡¶£ ‡¶ï‡ßã‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶ì‡¶®', 'en': 'South Korean Won'},
  'KWD': {'bn': '‡¶ï‡ßÅ‡¶Ø‡¶º‡ßá‡¶§‡¶ø ‡¶¶‡¶ø‡¶®‡¶æ‡¶∞', 'en': 'Kuwaiti Dinar'},
  'KYD': {'bn': '‡¶ï‡ßá‡¶Æ‡ßç‡¶Ø‡¶æ‡¶® ‡¶¶‡ßç‡¶¨‡ßÄ‡¶™‡¶™‡ßÅ‡¶û‡ßç‡¶ú ‡¶°‡¶≤‡¶æ‡¶∞', 'en': 'Cayman Islands Dollar'},
  'KZT': {'bn': '‡¶ï‡¶æ‡¶ú‡¶æ‡¶ñ‡¶∏‡ßç‡¶§‡¶æ‡¶®‡¶ø ‡¶ü‡ßá‡¶ô‡ßç‡¶ó‡ßá', 'en': 'Kazakhstani Tenge'},
  'LAK': {'bn': '‡¶≤‡¶æ‡¶ì‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶ï‡¶ø‡¶™', 'en': 'Laotian Kip'},
  'LBP': {'bn': '‡¶≤‡ßá‡¶¨‡¶æ‡¶®‡¶ø‡¶ú ‡¶™‡¶æ‡¶â‡¶®‡ßç‡¶°', 'en': 'Lebanese Pound'},
  'LKR': {'bn': '‡¶∂‡ßç‡¶∞‡ßÄ‡¶≤‡¶ô‡ßç‡¶ï‡¶æ‡¶® ‡¶∞‡ßÅ‡¶™‡¶ø', 'en': 'Sri Lankan Rupee'},
  'LRD': {'bn': '‡¶≤‡¶æ‡¶á‡¶¨‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶°‡¶≤‡¶æ‡¶∞', 'en': 'Liberian Dollar'},
  'LSL': {'bn': '‡¶≤‡ßá‡¶∏‡ßã‡¶•‡ßã ‡¶≤‡ßã‡¶§‡¶ø', 'en': 'Lesotho Loti'},
  'LYD': {'bn': '‡¶≤‡¶ø‡¶¨‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶¶‡¶ø‡¶®‡¶æ‡¶∞', 'en': 'Libyan Dinar'},
  'MAD': {'bn': '‡¶Æ‡¶∞‡¶ï‡ßç‡¶ï‡ßã‡¶∞ ‡¶¶‡¶ø‡¶∞‡¶π‡¶æ‡¶Æ', 'en': 'Moroccan Dirham'},
  'MDL': {'bn': '‡¶Æ‡ßã‡¶≤‡¶°‡ßã‡¶≠‡¶æ‡¶® ‡¶≤‡¶ø‡¶â', 'en': 'Moldovan Leu'},
  'MGA': {'bn': '‡¶Æ‡¶æ‡¶≤‡¶æ‡¶ó‡¶æ‡¶∏‡¶ø ‡¶Ü‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶∞‡¶ø', 'en': 'Malagasy Ariary'},
  'MKD': {'bn': '‡¶Æ‡ßç‡¶Ø‡¶æ‡¶∏‡ßá‡¶°‡ßã‡¶®‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶¶‡¶ø‡¶®‡¶æ‡¶∞', 'en': 'Macedonian Denar'},
  'MMK': {'bn': '‡¶Æ‡¶æ‡¶Ø‡¶º‡¶æ‡¶®‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶ø‡¶Ø‡¶º‡¶æ‡¶ü', 'en': 'Myanmar Kyat'},
  'MNT': {'bn': '‡¶Æ‡¶ô‡ßç‡¶ó‡ßã‡¶≤‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶§‡ßÅ‡¶ó‡¶∞‡¶ø‡¶ï', 'en': 'Mongolian Tugrik'},
  'MOP': {'bn': '‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶®‡¶ø‡¶ú ‡¶™‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ï‡¶æ', 'en': 'Macanese Pataca'}, // Corrected
  'MRU': {'bn': '‡¶Æ‡ßå‡¶∞‡¶ø‡¶§‡¶æ‡¶®‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶ì‡¶ó‡ßÅ‡¶á‡¶Ø‡¶º‡¶æ', 'en': 'Mauritanian Ouguiya'},
  'MUR': {'bn': '‡¶Æ‡¶∞‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶∞‡ßÅ‡¶™‡¶ø', 'en': 'Mauritian Rupee'},
  'MVR': {'bn': '‡¶Æ‡¶æ‡¶≤‡¶¶‡ßç‡¶¨‡ßÄ‡¶™‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶∞‡ßÅ‡¶´‡¶ø‡¶Ø‡¶º‡¶æ', 'en': 'Maldivian Rufiyaa'},
  'MWK': {'bn': '‡¶Æ‡¶æ‡¶≤‡¶æ‡¶â‡¶á‡¶Ø‡¶º‡¶æ‡¶® ‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶ö‡¶æ', 'en': 'Malawian Kwacha'},
  'MXN': {'bn': '‡¶Æ‡ßá‡¶ï‡ßç‡¶∏‡¶ø‡¶ï‡¶æ‡¶® ‡¶™‡ßá‡¶∏‡ßã', 'en': 'Mexican Peso'},
  'MYR': {'bn': '‡¶Æ‡¶æ‡¶≤‡¶Ø‡¶º‡ßá‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶∞‡¶ø‡¶ô‡ßç‡¶ó‡¶ø‡¶§', 'en': 'Malaysian Ringgit'},
  'MZN': {'bn': '‡¶Æ‡ßã‡¶ú‡¶æ‡¶Æ‡ßç‡¶¨‡¶ø‡¶ï‡¶æ‡¶® ‡¶Æ‡ßá‡¶ü‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤', 'en': 'Mozambican Metical'},
  'NAD': {'bn': '‡¶®‡¶æ‡¶Æ‡¶ø‡¶¨‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶°‡¶≤‡¶æ‡¶∞', 'en': 'Namibian Dollar'},
  'NGN': {'bn': '‡¶®‡¶æ‡¶á‡¶ú‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶®‡¶æ‡¶á‡¶∞‡¶æ', 'en': 'Nigerian Naira'},
  'NIO': {'bn': '‡¶®‡¶ø‡¶ï‡¶æ‡¶∞‡¶æ‡¶ó‡ßÅ‡¶Ø‡¶º‡¶æ‡¶® ‡¶ï‡¶∞‡ßç‡¶°‡ßã‡¶¨‡¶æ', 'en': 'Nicaraguan C√≥rdoba'},
  'NOK': {'bn': '‡¶®‡¶∞‡¶ì‡¶Ø‡¶º‡ßá‡¶ú‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶ï‡ßç‡¶∞‡ßã‡¶®', 'en': 'Norwegian Krone'},
  'NPR': {'bn': '‡¶®‡ßá‡¶™‡¶æ‡¶≤‡¶ø ‡¶∞‡ßÅ‡¶™‡¶ø', 'en': 'Nepalese Rupee'},
  'NZD': {'bn': '‡¶®‡¶ø‡¶â‡¶ú‡¶ø‡¶≤‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶° ‡¶°‡¶≤‡¶æ‡¶∞', 'en': 'New Zealand Dollar'},
  'OMR': {'bn': '‡¶ì‡¶Æ‡¶æ‡¶®‡¶ø ‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤', 'en': 'Omani Rial'},
  'PAB': {'bn': '‡¶™‡¶æ‡¶®‡¶æ‡¶Æ‡¶æ‡¶®‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶¨‡¶æ‡¶≤‡¶¨‡ßã‡¶Ø‡¶º‡¶æ', 'en': 'Panamanian Balboa'},
  'PEN': {'bn': '‡¶™‡ßá‡¶∞‡ßÅ‡¶≠‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶∏‡¶≤', 'en': 'Peruvian Sol'},
  'PGK': {'bn': '‡¶™‡¶æ‡¶™‡ßÅ‡¶Ø‡¶º‡¶æ ‡¶®‡¶ø‡¶â ‡¶ó‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶ï‡¶ø‡¶®‡¶æ', 'en': 'Papua New Guinean Kina'},
  'PHP': {'bn': '‡¶´‡¶ø‡¶≤‡¶ø‡¶™‡¶æ‡¶á‡¶® ‡¶™‡ßá‡¶∏‡ßã', 'en': 'Philippine Peso'},
  'PKR': {'bn': '‡¶™‡¶æ‡¶ï‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶®‡¶ø ‡¶∞‡ßÅ‡¶™‡¶ø', 'en': 'Pakistani Rupee'},
  'PLN': {'bn': '‡¶™‡ßã‡¶≤‡¶ø‡¶∂ ‡¶ú‡ßç‡¶≤‡¶ü‡¶ø', 'en': 'Polish Z≈Çoty'},
  'PYG': {'bn': '‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶ó‡ßÅ‡¶Ø‡¶º‡¶æ‡¶® ‡¶ó‡ßÅ‡¶Ø‡¶º‡¶æ‡¶∞‡¶æ‡¶®‡¶ø', 'en': 'Paraguayan Guarani'},
  'QAR': {'bn': '‡¶ï‡¶æ‡¶§‡¶æ‡¶∞‡¶ø ‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤', 'en': 'Qatari Riyal'},
  'RON': {'bn': '‡¶∞‡ßã‡¶Æ‡¶æ‡¶®‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶≤‡¶ø‡¶â', 'en': 'Romanian Leu'},
  'RSD': {'bn': '‡¶∏‡¶æ‡¶∞‡ßç‡¶¨‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶¶‡¶ø‡¶®‡¶æ‡¶∞', 'en': 'Serbian Dinar'},
  'RUB': {'bn': '‡¶∞‡¶æ‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶∞‡ßÅ‡¶¨‡ßá‡¶≤', 'en': 'Russian Ruble'},
  'RWF': {'bn': '‡¶∞‡ßÅ‡¶Ø‡¶º‡¶æ‡¶®‡ßç‡¶°‡¶æ‡¶® ‡¶´‡ßç‡¶∞‡¶æ‡¶Å', 'en': 'Rwandan Franc'},
  'SAR': {'bn': '‡¶∏‡ßå‡¶¶‡¶ø ‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤', 'en': 'Saudi Riyal'},
  'SBD': {'bn': '‡¶∏‡¶≤‡ßã‡¶Æ‡¶® ‡¶¶‡ßç‡¶¨‡ßÄ‡¶™‡¶™‡ßÅ‡¶û‡ßç‡¶ú ‡¶°‡¶≤‡¶æ‡¶∞', 'en': 'Solomon Islands Dollar'},
  'SCR': {'bn': '‡¶∏‡ßá‡¶∂‡ßá‡¶≤‡ßã‡¶Ø‡¶º‡¶ø‡¶∏ ‡¶∞‡ßÅ‡¶™‡¶ø', 'en': 'Seychellois Rupee'},
  'SDG': {'bn': '‡¶∏‡ßÅ‡¶¶‡¶æ‡¶®‡¶ø‡¶ú ‡¶™‡¶æ‡¶â‡¶®‡ßç‡¶°', 'en': 'Sudanese Pound'},
  'SEK': {'bn': '‡¶∏‡ßÅ‡¶á‡¶°‡¶ø‡¶∂ ‡¶ï‡ßç‡¶∞‡ßã‡¶®‡¶æ', 'en': 'Swedish Krona'},
  'SGD': {'bn': '‡¶∏‡¶ø‡¶ô‡ßç‡¶ó‡¶æ‡¶™‡ßÅ‡¶∞ ‡¶°‡¶≤‡¶æ‡¶∞', 'en': 'Singapore Dollar'},
  'SHP': {'bn': '‡¶∏‡ßá‡¶®‡ßç‡¶ü ‡¶π‡ßá‡¶≤‡ßá‡¶®‡¶æ ‡¶™‡¶æ‡¶â‡¶®‡ßç‡¶°', 'en': 'Saint Helena Pound'},
  'SLE': {'bn': '‡¶∏‡¶ø‡¶Ø‡¶º‡ßá‡¶∞‡¶æ ‡¶≤‡¶ø‡¶ì‡¶®‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶≤‡¶ø‡¶ì‡¶®', 'en': 'Sierra Leonean Leone'}, // Note: SLL is still often used
  'SLL': {'bn': '‡¶∏‡¶ø‡¶Ø‡¶º‡ßá‡¶∞‡¶æ ‡¶≤‡¶ø‡¶ì‡¶®‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶≤‡¶ø‡¶ì‡¶®', 'en': 'Sierra Leonean Leone'},
  'SOS': {'bn': '‡¶∏‡ßã‡¶Æ‡¶æ‡¶≤‡¶ø ‡¶∂‡¶ø‡¶≤‡¶ø‡¶Ç', 'en': 'Somali Shilling'},
  'SRD': {'bn': '‡¶∏‡ßÅ‡¶∞‡¶ø‡¶®‡¶æ‡¶Æ‡¶ø‡¶ú ‡¶°‡¶≤‡¶æ‡¶∞', 'en': 'Surinamese Dollar'},
  'SSP': {'bn': '‡¶¶‡¶ï‡ßç‡¶∑‡¶ø‡¶£ ‡¶∏‡ßÅ‡¶¶‡¶æ‡¶®‡¶ø‡¶ú ‡¶™‡¶æ‡¶â‡¶®‡ßç‡¶°', 'en': 'South Sudanese Pound'},
  'STN': {'bn': '‡¶∏‡¶æ‡¶ì ‡¶§‡ßã‡¶Æ‡ßá ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡¶ø‡¶®‡ßç‡¶∏‡¶ø‡¶™‡ßá ‡¶°‡ßã‡¶¨‡¶∞‡¶æ', 'en': 'S√£o Tom√© and Pr√≠ncipe Dobra'},
  'SVC': {'bn': '‡¶∏‡¶æ‡¶≤‡¶≠‡¶æ‡¶°‡ßã‡¶∞‡¶æ‡¶® ‡¶ï‡ßã‡¶≤‡¶®', 'en': 'Salvadoran Col√≥n'},
  'SYP': {'bn': '‡¶∏‡¶ø‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶™‡¶æ‡¶â‡¶®‡ßç‡¶°', 'en': 'Syrian Pound'},
  'SZL': {'bn': '‡¶∏‡ßã‡¶Ø‡¶º‡¶æ‡¶ú‡¶ø ‡¶≤‡¶ø‡¶≤‡¶æ‡¶ô‡ßç‡¶ó‡ßá‡¶®‡¶ø', 'en': 'Swazi Lilangeni'},
  'THB': {'bn': '‡¶•‡¶æ‡¶á ‡¶¨‡¶æ‡¶§', 'en': 'Thai Baht'},
  'TJS': {'bn': '‡¶§‡¶æ‡¶ú‡¶ø‡¶ï‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶®‡¶ø ‡¶∏‡ßã‡¶Æ‡ßã‡¶®‡¶ø', 'en': 'Tajikistani Somoni'},
  'TMT': {'bn': '‡¶§‡ßÅ‡¶∞‡ßç‡¶ï‡¶Æ‡ßá‡¶®‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶®‡¶ø ‡¶Æ‡¶æ‡¶®‡¶æ‡¶§', 'en': 'Turkmenistani Manat'},
  'TND': {'bn': '‡¶§‡¶ø‡¶â‡¶®‡¶ø‡¶∏‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶¶‡¶ø‡¶®‡¶æ‡¶∞', 'en': 'Tunisian Dinar'},
  'TOP': {'bn': '‡¶ü‡ßã‡¶ô‡ßç‡¶ó‡¶æ‡¶® ‡¶™‡¶æ‚Äô‡¶ô‡ßç‡¶ó‡¶æ', 'en': 'Tongan Pa ªanga'},
  'TRY': {'bn': '‡¶§‡ßÅ‡¶∞‡ßç‡¶ï‡¶ø ‡¶≤‡¶ø‡¶∞‡¶æ', 'en': 'Turkish Lira'},
  'TTD': {'bn': '‡¶§‡ßç‡¶∞‡¶ø‡¶®‡¶ø‡¶¶‡¶æ‡¶¶ ‡¶ì ‡¶ü‡ßã‡¶¨‡¶æ‡¶ó‡ßã ‡¶°‡¶≤‡¶æ‡¶∞', 'en': 'Trinidad and Tobago Dollar'},
  'TVD': {'bn': '‡¶ü‡ßÅ‡¶≠‡¶æ‡¶≤‡ßÅ‡¶Ø‡¶º‡¶æ‡¶® ‡¶°‡¶≤‡¶æ‡¶∞', 'en': 'Tuvaluan Dollar'},
  'TWD': {'bn': '‡¶®‡¶§‡ßÅ‡¶® ‡¶§‡¶æ‡¶á‡¶ì‡¶Ø‡¶º‡¶æ‡¶® ‡¶°‡¶≤‡¶æ‡¶∞', 'en': 'New Taiwan Dollar'},
  'TZS': {'bn': '‡¶§‡¶æ‡¶®‡¶ú‡¶æ‡¶®‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶∂‡¶ø‡¶≤‡¶ø‡¶Ç', 'en': 'Tanzanian Shilling'},
  'UAH': {'bn': '‡¶á‡¶â‡¶ï‡ßç‡¶∞‡ßá‡¶®‡ßÄ‡¶Ø‡¶º ‡¶∞‡¶ø‡¶≠‡¶®‡¶ø‡¶Ø‡¶º‡¶æ', 'en': 'Ukrainian Hryvnia'},
  'UGX': {'bn': '‡¶â‡¶ó‡¶æ‡¶®‡ßç‡¶°‡¶æ‡¶® ‡¶∂‡¶ø‡¶≤‡¶ø‡¶Ç', 'en': 'Ugandan Shilling'},
  'USD': {'bn': '‡¶á‡¶â‡¶è‡¶∏ ‡¶°‡¶≤‡¶æ‡¶∞', 'en': 'US Dollar'},
  'UYU': {'bn': '‡¶â‡¶∞‡ßÅ‡¶ó‡ßÅ‡¶Ø‡¶º‡¶æ‡¶® ‡¶™‡ßá‡¶∏‡ßã', 'en': 'Uruguayan Peso'},
  'UZS': {'bn': '‡¶â‡¶ú‡¶¨‡ßá‡¶ï‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶®‡¶ø ‡¶∏‡ßã‡¶Æ', 'en': 'Uzbekistani Som'},
  'VES': {'bn': '‡¶≠‡ßá‡¶®‡¶ø‡¶ú‡ßÅ‡¶Ø‡¶º‡ßá‡¶≤‡¶æ‡¶® ‡¶¨‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞ ‡¶∏‡ßã‡¶¨‡ßá‡¶∞‡¶æ‡¶®‡ßã', 'en': 'Venezuelan Bol√≠var Soberano'},
  'VND': {'bn': '‡¶≠‡¶ø‡¶Ø‡¶º‡ßá‡¶§‡¶®‡¶æ‡¶Æ‡ßÄ ‡¶°‡¶Ç', 'en': 'Vietnamese ƒê·ªìng'},
  'VUV': {'bn': '‡¶≠‡¶æ‡¶®‡ßÅ‡¶Ø‡¶º‡¶æ‡¶§‡ßÅ ‡¶≠‡¶æ‡¶§‡ßÅ', 'en': "Vanuatu Vatu"},
  'WST': {'bn': '‡¶∏‡¶æ‡¶Æ‡ßã‡¶Ø‡¶º‡¶æ‡¶® ‡¶§‡¶æ‚Äô‡¶≤‡¶æ', 'en': 'Samoan TƒÅlƒÅ'},
  'XAF': {'bn': '‡¶∏‡¶ø‡¶è‡¶´‡¶è ‡¶´‡ßç‡¶∞‡¶æ‡¶Å ‡¶¨‡¶ø‡¶á‡¶è‡¶∏‡¶ø', 'en': 'CFA Franc BEAC'},
  'XAG': {'bn': '‡¶∞‡ßÇ‡¶™‡¶æ (‡¶ü‡ßç‡¶∞‡¶Ø‡¶º ‡¶Ü‡¶â‡¶®‡ßç‡¶∏)', 'en': 'Silver (Troy Ounce)'},
  'XAU': {'bn': '‡¶∏‡ßç‡¶¨‡¶∞‡ßç‡¶£ (‡¶ü‡ßç‡¶∞‡¶Ø‡¶º ‡¶Ü‡¶â‡¶®‡ßç‡¶∏)', 'en': 'Gold (Troy Ounce)'},
  'XCD': {'bn': '‡¶™‡ßÇ‡¶∞‡ßç‡¶¨ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡¶¨‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶°‡¶≤‡¶æ‡¶∞', 'en': 'East Caribbean Dollar'},
  'XDR': {'bn': '‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶°‡ßç‡¶∞‡¶Ø‡¶º‡¶ø‡¶Ç ‡¶∞‡¶æ‡¶á‡¶ü‡¶∏', 'en': 'Special Drawing Rights'},
  'XOF': {'bn': '‡¶∏‡¶ø‡¶è‡¶´‡¶è ‡¶´‡ßç‡¶∞‡¶æ‡¶Å ‡¶¨‡¶ø‡¶∏‡¶ø‡¶á‡¶è‡¶ì', 'en': 'CFA Franc BCEAO'},
  'XPD': {'bn': '‡¶™‡ßç‡¶Ø‡¶æ‡¶≤‡¶æ‡¶°‡¶ø‡¶Ø‡¶º‡¶æ‡¶Æ (‡¶ü‡ßç‡¶∞‡¶Ø‡¶º ‡¶Ü‡¶â‡¶®‡ßç‡¶∏)', 'en': 'Palladium (Troy Ounce)'},
  'XPF': {'bn': '‡¶∏‡¶ø‡¶è‡¶´‡¶™‡¶ø ‡¶´‡ßç‡¶∞‡¶æ‡¶Å', 'en': 'CFP Franc'},
  'XPT': {'bn': '‡¶™‡ßç‡¶≤‡¶æ‡¶ü‡¶ø‡¶®‡¶æ‡¶Æ (‡¶ü‡ßç‡¶∞‡¶Ø‡¶º ‡¶Ü‡¶â‡¶®‡ßç‡¶∏)', 'en': 'Platinum (Troy Ounce)'},
  'YER': {'bn': '‡¶á‡¶Ø‡¶º‡ßá‡¶Æ‡ßá‡¶®‡¶ø ‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤', 'en': 'Yemeni Rial'},
  'ZAR': {'bn': '‡¶¶‡¶ï‡ßç‡¶∑‡¶ø‡¶£ ‡¶Ü‡¶´‡ßç‡¶∞‡¶ø‡¶ï‡¶æ‡¶® ‡¶∞‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°', 'en': 'South African Rand'},
  'ZMW': {'bn': '‡¶ú‡¶æ‡¶Æ‡ßç‡¶¨‡¶ø‡¶Ø‡¶º‡¶æ‡¶® ‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶ö‡¶æ', 'en': 'Zambian Kwacha'},
  'ZWL': {'bn': '‡¶ú‡¶ø‡¶Æ‡ßç‡¶¨‡¶æ‡¶¨‡ßÅ‡¶Ø‡¶º‡¶æ‡¶® ‡¶°‡¶≤‡¶æ‡¶∞', 'en': 'Zimbabwean Dollar'},
};